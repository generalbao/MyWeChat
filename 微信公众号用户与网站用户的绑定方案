1 微信的二维码生成 http://mp.weixin.qq.com/wiki/18/28fc21e7ed87bec960651f0ce873ef8a.html 目前有2种类型的二维码，分别是临时二维码和永久二维码，前者有过期时间，有效期30天（2592000秒），但能够生成较多数量，后者无过期时间，数量较少（目前参数只支持1--100000，即10万个）。两种二维码分别适用于帐号绑定、用户来源统计等场景。

2 次完整的绑定流程应该是这样的：

①用户登录网页，点击“绑定微信账户”；
②后台使用微信接口，生成二维码链接返回给前端显示，并建立场景值A与用户的对应关系；
③用户扫描二维码，并点击关注微信公众号（假如已关注，直接跳到④）；
④后台接收微信服务器推送的场景值A；
⑤后台根据场景值A，查询到对应的用户ID（依赖于②中建立的对应关系）；
⑥建立用户userid与微信用户openid的对应关系；
⑦给用户的微信客户端推送“绑定成功”的提示；
⑧通知前台页面，绑定已完成，刷新页面，并返回一些微信账户信息。完成绑定。

其中，②中，“建立场景值A与用户之间的对应关系”，因为用户已经登录，所以用户点击“绑定微信账户”时，我们可以在后台分配一个临时场景值A与用户ID之间的对于关系。对于用户量不大的网站，可以直接使用php中的apc来缓存，并设置一个过期时间（与临时二维码过期时间设置成一样即可）。不要使用session来存储这种对应关系，因为④中是微信的推送事件，是不带session信息的，可以使用redis这类缓存或DB来存储。另，这里要使用临时二维码，数量上没有限制，只有时间限制，前台定时刷新即可。

⑧中，因为http没有推送机制，所以最简单的方法就是轮询去查询，是否已经完成绑定，完成绑定后再刷新页面。

完成绑定后，用户再跟我们的微信公众号交互时，根据openid可以找到对应的userid，即完成身份识别。对于之前提到的下单，查询订单，都是可以实现的。

整个绑定过程并不复杂，实现起来也没有太大的技术难度，最关键的是思路。

上述流程是用户已经在网页端登录了，也就是说已经注册用户。对于没有登录的情况，我们也可以做，在登录页面生成一个二维码，让用户用微信扫一扫。假如用户已经注册，则可以自动登录，并完成网站账号和微信账号的绑定；假如用户没有注册，则网页跳转到绑定账号页面，只要用户输入邮箱密码快速注册，同时也完成了网站账号和微信用户的绑定。实现技术方案跟上述类似。